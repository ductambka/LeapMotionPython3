# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import LeapPython3
else:
    import LeapPython3

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = LeapPython3.delete_SwigPyIterator

    def value(self):
        return LeapPython3.SwigPyIterator_value(self)

    def incr(self, n=1):
        return LeapPython3.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return LeapPython3.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return LeapPython3.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return LeapPython3.SwigPyIterator_equal(self, x)

    def copy(self):
        return LeapPython3.SwigPyIterator_copy(self)

    def next(self):
        return LeapPython3.SwigPyIterator_next(self)

    def __next__(self):
        return LeapPython3.SwigPyIterator___next__(self)

    def previous(self):
        return LeapPython3.SwigPyIterator_previous(self)

    def advance(self, n):
        return LeapPython3.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return LeapPython3.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return LeapPython3.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return LeapPython3.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return LeapPython3.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return LeapPython3.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return LeapPython3.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in LeapPython3:
LeapPython3.SwigPyIterator_swigregister(SwigPyIterator)

class byte_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        LeapPython3.byte_array_swiginit(self, LeapPython3.new_byte_array(nelements))
    __swig_destroy__ = LeapPython3.delete_byte_array

    def __getitem__(self, index):
        return LeapPython3.byte_array___getitem__(self, index)

    def __setitem__(self, index, value):
        return LeapPython3.byte_array___setitem__(self, index, value)

    def cast(self):
        return LeapPython3.byte_array_cast(self)

    @staticmethod
    def frompointer(t):
        return LeapPython3.byte_array_frompointer(t)

# Register byte_array in LeapPython3:
LeapPython3.byte_array_swigregister(byte_array)

def byte_array_frompointer(t):
    return LeapPython3.byte_array_frompointer(t)

class float_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        LeapPython3.float_array_swiginit(self, LeapPython3.new_float_array(nelements))
    __swig_destroy__ = LeapPython3.delete_float_array

    def __getitem__(self, index):
        return LeapPython3.float_array___getitem__(self, index)

    def __setitem__(self, index, value):
        return LeapPython3.float_array___setitem__(self, index, value)

    def cast(self):
        return LeapPython3.float_array_cast(self)

    @staticmethod
    def frompointer(t):
        return LeapPython3.float_array_frompointer(t)

# Register float_array in LeapPython3:
LeapPython3.float_array_swigregister(float_array)

def float_array_frompointer(t):
    return LeapPython3.float_array_frompointer(t)

class Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        LeapPython3.Vector_swiginit(self, LeapPython3.new_Vector(*args))

    def distance_to(self, other):
        return LeapPython3.Vector_distance_to(self, other)

    def angle_to(self, other):
        return LeapPython3.Vector_angle_to(self, other)

    def dot(self, other):
        return LeapPython3.Vector_dot(self, other)

    def cross(self, other):
        return LeapPython3.Vector_cross(self, other)

    def __neg__(self):
        return LeapPython3.Vector___neg__(self)

    def __add__(self, other):
        return LeapPython3.Vector___add__(self, other)

    def __sub__(self, other):
        return LeapPython3.Vector___sub__(self, other)

    def __mul__(self, scalar):
        return LeapPython3.Vector___mul__(self, scalar)

    def __truediv__(self, *args):
        return LeapPython3.Vector___truediv__(self, *args)
    __div__ = __truediv__



    def __iadd__(self, other):
        return LeapPython3.Vector___iadd__(self, other)

    def __isub__(self, other):
        return LeapPython3.Vector___isub__(self, other)

    def __imul__(self, scalar):
        return LeapPython3.Vector___imul__(self, scalar)

    def __itruediv__(self, *args):
        return LeapPython3.Vector___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __str__(self):
        return LeapPython3.Vector___str__(self)

    def __eq__(self, other):
        return LeapPython3.Vector___eq__(self, other)

    def __ne__(self, other):
        return LeapPython3.Vector___ne__(self, other)

    def is_valid(self):
        return LeapPython3.Vector_is_valid(self)

    def __getitem__(self, index):
        return LeapPython3.Vector___getitem__(self, index)
    x = property(LeapPython3.Vector_x_get, LeapPython3.Vector_x_set)
    y = property(LeapPython3.Vector_y_get, LeapPython3.Vector_y_set)
    z = property(LeapPython3.Vector_z_get, LeapPython3.Vector_z_set)
    magnitude = property(LeapPython3.Vector_magnitude_get)
    magnitude_squared = property(LeapPython3.Vector_magnitude_squared_get)
    pitch = property(LeapPython3.Vector_pitch_get)
    roll = property(LeapPython3.Vector_roll_get)
    yaw = property(LeapPython3.Vector_yaw_get)
    normalized = property(LeapPython3.Vector_normalized_get)

    def to_float_array(self): return [self.x, self.y, self.z]
    def to_tuple(self): return (self.x, self.y, self.z)

    __swig_destroy__ = LeapPython3.delete_Vector

# Register Vector in LeapPython3:
LeapPython3.Vector_swigregister(Vector)
cvar = LeapPython3.cvar
PI = cvar.PI
DEG_TO_RAD = cvar.DEG_TO_RAD
RAD_TO_DEG = cvar.RAD_TO_DEG
EPSILON = cvar.EPSILON
Vector.zero = LeapPython3.cvar.Vector_zero
Vector.x_axis = LeapPython3.cvar.Vector_x_axis
Vector.y_axis = LeapPython3.cvar.Vector_y_axis
Vector.z_axis = LeapPython3.cvar.Vector_z_axis
Vector.forward = LeapPython3.cvar.Vector_forward
Vector.backward = LeapPython3.cvar.Vector_backward
Vector.left = LeapPython3.cvar.Vector_left
Vector.right = LeapPython3.cvar.Vector_right
Vector.up = LeapPython3.cvar.Vector_up
Vector.down = LeapPython3.cvar.Vector_down

class Matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        LeapPython3.Matrix_swiginit(self, LeapPython3.new_Matrix(*args))

    def set_rotation(self, axis, angle_radians):
        return LeapPython3.Matrix_set_rotation(self, axis, angle_radians)

    def transform_point(self, _in):
        return LeapPython3.Matrix_transform_point(self, _in)

    def transform_direction(self, _in):
        return LeapPython3.Matrix_transform_direction(self, _in)

    def rigid_inverse(self):
        return LeapPython3.Matrix_rigid_inverse(self)

    def __mul__(self, other):
        return LeapPython3.Matrix___mul__(self, other)

    def __imul__(self, other):
        return LeapPython3.Matrix___imul__(self, other)

    def __eq__(self, other):
        return LeapPython3.Matrix___eq__(self, other)

    def __ne__(self, other):
        return LeapPython3.Matrix___ne__(self, other)

    def __str__(self):
        return LeapPython3.Matrix___str__(self)
    x_basis = property(LeapPython3.Matrix_x_basis_get, LeapPython3.Matrix_x_basis_set)
    y_basis = property(LeapPython3.Matrix_y_basis_get, LeapPython3.Matrix_y_basis_set)
    z_basis = property(LeapPython3.Matrix_z_basis_get, LeapPython3.Matrix_z_basis_set)
    origin = property(LeapPython3.Matrix_origin_get, LeapPython3.Matrix_origin_set)

    def to_array_3x3(self, output = None):
      if output is None:
          output = [0]*9
      output[0], output[1], output[2] = self.x_basis.x, self.x_basis.y, self.x_basis.z
      output[3], output[4], output[5] = self.y_basis.x, self.y_basis.y, self.y_basis.z
      output[6], output[7], output[8] = self.z_basis.x, self.z_basis.y, self.z_basis.z
      return output
    def to_array_4x4(self, output = None):
      if output is None:
          output = [0]*16
      output[0],  output[1],  output[2],  output[3]  = self.x_basis.x, self.x_basis.y, self.x_basis.z, 0.0
      output[4],  output[5],  output[6],  output[7]  = self.y_basis.x, self.y_basis.y, self.y_basis.z, 0.0
      output[8],  output[9],  output[10], output[11] = self.z_basis.x, self.z_basis.y, self.z_basis.z, 0.0
      output[12], output[13], output[14], output[15] = self.origin.x,  self.origin.y,  self.origin.z,  1.0
      return output

    __swig_destroy__ = LeapPython3.delete_Matrix

# Register Matrix in LeapPython3:
LeapPython3.Matrix_swigregister(Matrix)
Matrix.identity = LeapPython3.cvar.Matrix_identity

class Interface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register Interface in LeapPython3:
LeapPython3.Interface_swigregister(Interface)

class Pointable(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ZONE_NONE = LeapPython3.Pointable_ZONE_NONE
    ZONE_HOVERING = LeapPython3.Pointable_ZONE_HOVERING
    ZONE_TOUCHING = LeapPython3.Pointable_ZONE_TOUCHING

    def __init__(self):
        LeapPython3.Pointable_swiginit(self, LeapPython3.new_Pointable())

    def __eq__(self, arg2):
        return LeapPython3.Pointable___eq__(self, arg2)

    def __ne__(self, arg2):
        return LeapPython3.Pointable___ne__(self, arg2)

    def __str__(self):
        return LeapPython3.Pointable___str__(self)
    id = property(LeapPython3.Pointable_id_get)
    hand = property(LeapPython3.Pointable_hand_get)
    tip_position = property(LeapPython3.Pointable_tip_position_get)
    tip_velocity = property(LeapPython3.Pointable_tip_velocity_get)
    direction = property(LeapPython3.Pointable_direction_get)
    width = property(LeapPython3.Pointable_width_get)
    length = property(LeapPython3.Pointable_length_get)
    is_tool = property(LeapPython3.Pointable_is_tool_get)
    is_finger = property(LeapPython3.Pointable_is_finger_get)
    is_extended = property(LeapPython3.Pointable_is_extended_get)
    is_valid = property(LeapPython3.Pointable_is_valid_get)
    touch_zone = property(LeapPython3.Pointable_touch_zone_get)
    touch_distance = property(LeapPython3.Pointable_touch_distance_get)
    stabilized_tip_position = property(LeapPython3.Pointable_stabilized_tip_position_get)
    time_visible = property(LeapPython3.Pointable_time_visible_get)
    frame = property(LeapPython3.Pointable_frame_get)
    __swig_destroy__ = LeapPython3.delete_Pointable

# Register Pointable in LeapPython3:
LeapPython3.Pointable_swigregister(Pointable)
Pointable.invalid = LeapPython3.cvar.Pointable_invalid

class Arm(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.Arm_swiginit(self, LeapPython3.new_Arm())

    def __eq__(self, arg2):
        return LeapPython3.Arm___eq__(self, arg2)

    def __ne__(self, arg2):
        return LeapPython3.Arm___ne__(self, arg2)

    def __str__(self):
        return LeapPython3.Arm___str__(self)
    width = property(LeapPython3.Arm_width_get)
    center = property(LeapPython3.Arm_center_get)
    direction = property(LeapPython3.Arm_direction_get)
    basis = property(LeapPython3.Arm_basis_get)
    elbow_position = property(LeapPython3.Arm_elbow_position_get)
    wrist_position = property(LeapPython3.Arm_wrist_position_get)
    is_valid = property(LeapPython3.Arm_is_valid_get)
    __swig_destroy__ = LeapPython3.delete_Arm

# Register Arm in LeapPython3:
LeapPython3.Arm_swigregister(Arm)
Arm.invalid = LeapPython3.cvar.Arm_invalid

class Bone(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TYPE_METACARPAL = LeapPython3.Bone_TYPE_METACARPAL
    TYPE_PROXIMAL = LeapPython3.Bone_TYPE_PROXIMAL
    TYPE_INTERMEDIATE = LeapPython3.Bone_TYPE_INTERMEDIATE
    TYPE_DISTAL = LeapPython3.Bone_TYPE_DISTAL

    def __init__(self):
        LeapPython3.Bone_swiginit(self, LeapPython3.new_Bone())

    def __eq__(self, arg2):
        return LeapPython3.Bone___eq__(self, arg2)

    def __ne__(self, arg2):
        return LeapPython3.Bone___ne__(self, arg2)

    def __str__(self):
        return LeapPython3.Bone___str__(self)
    prev_joint = property(LeapPython3.Bone_prev_joint_get)
    next_joint = property(LeapPython3.Bone_next_joint_get)
    center = property(LeapPython3.Bone_center_get)
    direction = property(LeapPython3.Bone_direction_get)
    length = property(LeapPython3.Bone_length_get)
    width = property(LeapPython3.Bone_width_get)
    type = property(LeapPython3.Bone_type_get)
    basis = property(LeapPython3.Bone_basis_get)
    is_valid = property(LeapPython3.Bone_is_valid_get)
    __swig_destroy__ = LeapPython3.delete_Bone

# Register Bone in LeapPython3:
LeapPython3.Bone_swigregister(Bone)
Bone.invalid = LeapPython3.cvar.Bone_invalid

class Finger(Pointable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    JOINT_MCP = LeapPython3.Finger_JOINT_MCP
    JOINT_PIP = LeapPython3.Finger_JOINT_PIP
    JOINT_DIP = LeapPython3.Finger_JOINT_DIP
    JOINT_TIP = LeapPython3.Finger_JOINT_TIP
    TYPE_THUMB = LeapPython3.Finger_TYPE_THUMB
    TYPE_INDEX = LeapPython3.Finger_TYPE_INDEX
    TYPE_MIDDLE = LeapPython3.Finger_TYPE_MIDDLE
    TYPE_RING = LeapPython3.Finger_TYPE_RING
    TYPE_PINKY = LeapPython3.Finger_TYPE_PINKY

    def __init__(self, *args):
        LeapPython3.Finger_swiginit(self, LeapPython3.new_Finger(*args))

    def joint_position(self, joint_ix):
        return LeapPython3.Finger_joint_position(self, joint_ix)

    def bone(self, bone_ix):
        return LeapPython3.Finger_bone(self, bone_ix)

    def __str__(self):
        return LeapPython3.Finger___str__(self)
    type = property(LeapPython3.Finger_type_get)
    __swig_destroy__ = LeapPython3.delete_Finger

# Register Finger in LeapPython3:
LeapPython3.Finger_swigregister(Finger)
Finger.invalid = LeapPython3.cvar.Finger_invalid

class Tool(Pointable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        LeapPython3.Tool_swiginit(self, LeapPython3.new_Tool(*args))

    def __str__(self):
        return LeapPython3.Tool___str__(self)
    __swig_destroy__ = LeapPython3.delete_Tool

# Register Tool in LeapPython3:
LeapPython3.Tool_swigregister(Tool)
Tool.invalid = LeapPython3.cvar.Tool_invalid

class Hand(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.Hand_swiginit(self, LeapPython3.new_Hand())

    def pointable(self, id):
        return LeapPython3.Hand_pointable(self, id)

    def finger(self, id):
        return LeapPython3.Hand_finger(self, id)

    def tool(self, id):
        return LeapPython3.Hand_tool(self, id)

    def translation(self, since_frame):
        return LeapPython3.Hand_translation(self, since_frame)

    def translation_probability(self, since_frame):
        return LeapPython3.Hand_translation_probability(self, since_frame)

    def rotation_axis(self, since_frame):
        return LeapPython3.Hand_rotation_axis(self, since_frame)

    def rotation_angle(self, *args):
        return LeapPython3.Hand_rotation_angle(self, *args)

    def rotation_matrix(self, since_frame):
        return LeapPython3.Hand_rotation_matrix(self, since_frame)

    def rotation_probability(self, since_frame):
        return LeapPython3.Hand_rotation_probability(self, since_frame)

    def scale_factor(self, since_frame):
        return LeapPython3.Hand_scale_factor(self, since_frame)

    def scale_probability(self, since_frame):
        return LeapPython3.Hand_scale_probability(self, since_frame)

    def __eq__(self, arg2):
        return LeapPython3.Hand___eq__(self, arg2)

    def __ne__(self, arg2):
        return LeapPython3.Hand___ne__(self, arg2)

    def __str__(self):
        return LeapPython3.Hand___str__(self)
    id = property(LeapPython3.Hand_id_get)
    pointables = property(LeapPython3.Hand_pointables_get)
    fingers = property(LeapPython3.Hand_fingers_get)
    tools = property(LeapPython3.Hand_tools_get)
    palm_position = property(LeapPython3.Hand_palm_position_get)
    palm_velocity = property(LeapPython3.Hand_palm_velocity_get)
    palm_normal = property(LeapPython3.Hand_palm_normal_get)
    direction = property(LeapPython3.Hand_direction_get)
    basis = property(LeapPython3.Hand_basis_get)
    is_valid = property(LeapPython3.Hand_is_valid_get)
    sphere_center = property(LeapPython3.Hand_sphere_center_get)
    sphere_radius = property(LeapPython3.Hand_sphere_radius_get)
    grab_strength = property(LeapPython3.Hand_grab_strength_get)
    pinch_strength = property(LeapPython3.Hand_pinch_strength_get)
    palm_width = property(LeapPython3.Hand_palm_width_get)
    stabilized_palm_position = property(LeapPython3.Hand_stabilized_palm_position_get)
    wrist_position = property(LeapPython3.Hand_wrist_position_get)
    time_visible = property(LeapPython3.Hand_time_visible_get)
    confidence = property(LeapPython3.Hand_confidence_get)
    is_left = property(LeapPython3.Hand_is_left_get)
    is_right = property(LeapPython3.Hand_is_right_get)
    frame = property(LeapPython3.Hand_frame_get)
    arm = property(LeapPython3.Hand_arm_get)
    __swig_destroy__ = LeapPython3.delete_Hand

# Register Hand in LeapPython3:
LeapPython3.Hand_swigregister(Hand)
Hand.invalid = LeapPython3.cvar.Hand_invalid

class Gesture(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TYPE_INVALID = LeapPython3.Gesture_TYPE_INVALID
    TYPE_SWIPE = LeapPython3.Gesture_TYPE_SWIPE
    TYPE_CIRCLE = LeapPython3.Gesture_TYPE_CIRCLE
    TYPE_SCREEN_TAP = LeapPython3.Gesture_TYPE_SCREEN_TAP
    TYPE_KEY_TAP = LeapPython3.Gesture_TYPE_KEY_TAP
    STATE_INVALID = LeapPython3.Gesture_STATE_INVALID
    STATE_START = LeapPython3.Gesture_STATE_START
    STATE_UPDATE = LeapPython3.Gesture_STATE_UPDATE
    STATE_STOP = LeapPython3.Gesture_STATE_STOP

    def __init__(self, *args):
        LeapPython3.Gesture_swiginit(self, LeapPython3.new_Gesture(*args))

    def __eq__(self, rhs):
        return LeapPython3.Gesture___eq__(self, rhs)

    def __ne__(self, rhs):
        return LeapPython3.Gesture___ne__(self, rhs)

    def __str__(self):
        return LeapPython3.Gesture___str__(self)
    type = property(LeapPython3.Gesture_type_get)
    state = property(LeapPython3.Gesture_state_get)
    id = property(LeapPython3.Gesture_id_get)
    duration = property(LeapPython3.Gesture_duration_get)
    duration_seconds = property(LeapPython3.Gesture_duration_seconds_get)
    frame = property(LeapPython3.Gesture_frame_get)
    hands = property(LeapPython3.Gesture_hands_get)
    pointables = property(LeapPython3.Gesture_pointables_get)
    is_valid = property(LeapPython3.Gesture_is_valid_get)
    __swig_destroy__ = LeapPython3.delete_Gesture

# Register Gesture in LeapPython3:
LeapPython3.Gesture_swigregister(Gesture)
Gesture.invalid = LeapPython3.cvar.Gesture_invalid

class SwipeGesture(Gesture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def class_type():
        return LeapPython3.SwipeGesture_class_type()

    def __init__(self, *args):
        LeapPython3.SwipeGesture_swiginit(self, LeapPython3.new_SwipeGesture(*args))
    start_position = property(LeapPython3.SwipeGesture_start_position_get)
    position = property(LeapPython3.SwipeGesture_position_get)
    direction = property(LeapPython3.SwipeGesture_direction_get)
    speed = property(LeapPython3.SwipeGesture_speed_get)
    pointable = property(LeapPython3.SwipeGesture_pointable_get)
    __swig_destroy__ = LeapPython3.delete_SwipeGesture

# Register SwipeGesture in LeapPython3:
LeapPython3.SwipeGesture_swigregister(SwipeGesture)

def SwipeGesture_class_type():
    return LeapPython3.SwipeGesture_class_type()

class CircleGesture(Gesture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def class_type():
        return LeapPython3.CircleGesture_class_type()

    def __init__(self, *args):
        LeapPython3.CircleGesture_swiginit(self, LeapPython3.new_CircleGesture(*args))
    center = property(LeapPython3.CircleGesture_center_get)
    normal = property(LeapPython3.CircleGesture_normal_get)
    progress = property(LeapPython3.CircleGesture_progress_get)
    radius = property(LeapPython3.CircleGesture_radius_get)
    pointable = property(LeapPython3.CircleGesture_pointable_get)
    __swig_destroy__ = LeapPython3.delete_CircleGesture

# Register CircleGesture in LeapPython3:
LeapPython3.CircleGesture_swigregister(CircleGesture)

def CircleGesture_class_type():
    return LeapPython3.CircleGesture_class_type()

class ScreenTapGesture(Gesture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def class_type():
        return LeapPython3.ScreenTapGesture_class_type()

    def __init__(self, *args):
        LeapPython3.ScreenTapGesture_swiginit(self, LeapPython3.new_ScreenTapGesture(*args))
    position = property(LeapPython3.ScreenTapGesture_position_get)
    direction = property(LeapPython3.ScreenTapGesture_direction_get)
    progress = property(LeapPython3.ScreenTapGesture_progress_get)
    pointable = property(LeapPython3.ScreenTapGesture_pointable_get)
    __swig_destroy__ = LeapPython3.delete_ScreenTapGesture

# Register ScreenTapGesture in LeapPython3:
LeapPython3.ScreenTapGesture_swigregister(ScreenTapGesture)

def ScreenTapGesture_class_type():
    return LeapPython3.ScreenTapGesture_class_type()

class KeyTapGesture(Gesture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def class_type():
        return LeapPython3.KeyTapGesture_class_type()

    def __init__(self, *args):
        LeapPython3.KeyTapGesture_swiginit(self, LeapPython3.new_KeyTapGesture(*args))
    position = property(LeapPython3.KeyTapGesture_position_get)
    direction = property(LeapPython3.KeyTapGesture_direction_get)
    progress = property(LeapPython3.KeyTapGesture_progress_get)
    pointable = property(LeapPython3.KeyTapGesture_pointable_get)
    __swig_destroy__ = LeapPython3.delete_KeyTapGesture

# Register KeyTapGesture in LeapPython3:
LeapPython3.KeyTapGesture_swigregister(KeyTapGesture)

def KeyTapGesture_class_type():
    return LeapPython3.KeyTapGesture_class_type()

class Screen(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.Screen_swiginit(self, LeapPython3.new_Screen())

    def intersect(self, *args):
        return LeapPython3.Screen_intersect(self, *args)

    def project(self, position, normalize, clamp_ratio=1.0):
        return LeapPython3.Screen_project(self, position, normalize, clamp_ratio)

    def normal(self):
        return LeapPython3.Screen_normal(self)

    def distance_to_point(self, point):
        return LeapPython3.Screen_distance_to_point(self, point)

    def __eq__(self, arg2):
        return LeapPython3.Screen___eq__(self, arg2)

    def __ne__(self, arg2):
        return LeapPython3.Screen___ne__(self, arg2)

    def __str__(self):
        return LeapPython3.Screen___str__(self)
    id = property(LeapPython3.Screen_id_get)
    horizontal_axis = property(LeapPython3.Screen_horizontal_axis_get)
    vertical_axis = property(LeapPython3.Screen_vertical_axis_get)
    bottom_left_corner = property(LeapPython3.Screen_bottom_left_corner_get)
    width_pixels = property(LeapPython3.Screen_width_pixels_get)
    height_pixels = property(LeapPython3.Screen_height_pixels_get)
    is_valid = property(LeapPython3.Screen_is_valid_get)
    __swig_destroy__ = LeapPython3.delete_Screen

# Register Screen in LeapPython3:
LeapPython3.Screen_swigregister(Screen)
Screen.invalid = LeapPython3.cvar.Screen_invalid

class Device(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TYPE_PERIPHERAL = LeapPython3.Device_TYPE_PERIPHERAL
    TYPE_LAPTOP = LeapPython3.Device_TYPE_LAPTOP
    TYPE_KEYBOARD = LeapPython3.Device_TYPE_KEYBOARD

    def __init__(self):
        LeapPython3.Device_swiginit(self, LeapPython3.new_Device())

    def distance_to_boundary(self, position):
        return LeapPython3.Device_distance_to_boundary(self, position)

    def __eq__(self, arg2):
        return LeapPython3.Device___eq__(self, arg2)

    def __ne__(self, arg2):
        return LeapPython3.Device___ne__(self, arg2)

    def __str__(self):
        return LeapPython3.Device___str__(self)
    horizontal_view_angle = property(LeapPython3.Device_horizontal_view_angle_get)
    vertical_view_angle = property(LeapPython3.Device_vertical_view_angle_get)
    range = property(LeapPython3.Device_range_get)
    baseline = property(LeapPython3.Device_baseline_get)
    is_valid = property(LeapPython3.Device_is_valid_get)
    is_embedded = property(LeapPython3.Device_is_embedded_get)
    is_streaming = property(LeapPython3.Device_is_streaming_get)
    is_flipped = property(LeapPython3.Device_is_flipped_get)
    type = property(LeapPython3.Device_type_get)
    serial_number = property(LeapPython3.Device_serial_number_get)
    position = property(LeapPython3.Device_position_get)
    orientation = property(LeapPython3.Device_orientation_get)
    __swig_destroy__ = LeapPython3.delete_Device

# Register Device in LeapPython3:
LeapPython3.Device_swigregister(Device)
Device.invalid = LeapPython3.cvar.Device_invalid

class Image(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.Image_swiginit(self, LeapPython3.new_Image())

    def data(self, dst):
        return LeapPython3.Image_data(self, dst)

    def distortion(self, dst):
        return LeapPython3.Image_distortion(self, dst)
    INFRARED = LeapPython3.Image_INFRARED

    def rectify(self, uv):
        return LeapPython3.Image_rectify(self, uv)

    def warp(self, xy):
        return LeapPython3.Image_warp(self, xy)

    def __eq__(self, arg2):
        return LeapPython3.Image___eq__(self, arg2)

    def __ne__(self, arg2):
        return LeapPython3.Image___ne__(self, arg2)

    def __str__(self):
        return LeapPython3.Image___str__(self)
    sequence_id = property(LeapPython3.Image_sequence_id_get)
    id = property(LeapPython3.Image_id_get)
    width = property(LeapPython3.Image_width_get)
    height = property(LeapPython3.Image_height_get)
    bytes_per_pixel = property(LeapPython3.Image_bytes_per_pixel_get)
    format = property(LeapPython3.Image_format_get)
    distortion_width = property(LeapPython3.Image_distortion_width_get)
    distortion_height = property(LeapPython3.Image_distortion_height_get)
    ray_offset_x = property(LeapPython3.Image_ray_offset_x_get)
    ray_offset_y = property(LeapPython3.Image_ray_offset_y_get)
    ray_scale_x = property(LeapPython3.Image_ray_scale_x_get)
    ray_scale_y = property(LeapPython3.Image_ray_scale_y_get)
    timestamp = property(LeapPython3.Image_timestamp_get)
    is_valid = property(LeapPython3.Image_is_valid_get)

    def data(self):
      ptr = byte_array(self.width * self.height * self.bytes_per_pixel)
      LeapPython3.Image_data(self, ptr)
      return ptr
    def distortion(self):
      ptr = float_array(self.distortion_width * self.distortion_height)
      LeapPython3.Image_distortion(self, ptr)
      return ptr
    __swig_getmethods__["data"] = data
    if _newclass:data = _swig_property(data)
    __swig_getmethods__["distortion"] = distortion
    if _newclass:distortion = _swig_property(distortion)

    data_pointer = property(LeapPython3.Image_data_pointer_get)
    distortion_pointer = property(LeapPython3.Image_distortion_pointer_get)
    __swig_destroy__ = LeapPython3.delete_Image

# Register Image in LeapPython3:
LeapPython3.Image_swigregister(Image)
Image.invalid = LeapPython3.cvar.Image_invalid

class Mask(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.Mask_swiginit(self, LeapPython3.new_Mask())

    def data(self, dst):
        return LeapPython3.Mask_data(self, dst)

    @staticmethod
    def invalid():
        return LeapPython3.Mask_invalid()

    def __eq__(self, arg2):
        return LeapPython3.Mask___eq__(self, arg2)

    def __ne__(self, arg2):
        return LeapPython3.Mask___ne__(self, arg2)

    def __str__(self):
        return LeapPython3.Mask___str__(self)
    sequence_id = property(LeapPython3.Mask_sequence_id_get)
    id = property(LeapPython3.Mask_id_get)
    width = property(LeapPython3.Mask_width_get)
    height = property(LeapPython3.Mask_height_get)
    offset_x = property(LeapPython3.Mask_offset_x_get)
    offset_y = property(LeapPython3.Mask_offset_y_get)
    is_valid = property(LeapPython3.Mask_is_valid_get)

    def data(self):
      ptr = byte_array(self.width * self.height)
      LeapPython3.Mask_data(self, ptr)
      return ptr
    __swig_getmethods__["data"] = data
    if _newclass:data = _swig_property(data)

    data_pointer = property(LeapPython3.Mask_data_pointer_get)
    __swig_destroy__ = LeapPython3.delete_Mask

# Register Mask in LeapPython3:
LeapPython3.Mask_swigregister(Mask)

def Mask_invalid():
    return LeapPython3.Mask_invalid()

class PointableList(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.PointableList_swiginit(self, LeapPython3.new_PointableList())

    def __len__(self):
        return LeapPython3.PointableList___len__(self)

    def __getitem__(self, index):
        return LeapPython3.PointableList___getitem__(self, index)

    def append(self, *args):
        return LeapPython3.PointableList_append(self, *args)

    def extended(self):
        return LeapPython3.PointableList_extended(self)
    is_empty = property(LeapPython3.PointableList_is_empty_get)
    leftmost = property(LeapPython3.PointableList_leftmost_get)
    rightmost = property(LeapPython3.PointableList_rightmost_get)
    frontmost = property(LeapPython3.PointableList_frontmost_get)

    def __iter__(self):
      _pos = 0
      while _pos < len(self):
        yield self[_pos]
        _pos += 1

    __swig_destroy__ = LeapPython3.delete_PointableList

# Register PointableList in LeapPython3:
LeapPython3.PointableList_swigregister(PointableList)

class FingerList(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.FingerList_swiginit(self, LeapPython3.new_FingerList())

    def __len__(self):
        return LeapPython3.FingerList___len__(self)

    def __getitem__(self, index):
        return LeapPython3.FingerList___getitem__(self, index)

    def append(self, other):
        return LeapPython3.FingerList_append(self, other)

    def extended(self):
        return LeapPython3.FingerList_extended(self)

    def finger_type(self, type):
        return LeapPython3.FingerList_finger_type(self, type)
    is_empty = property(LeapPython3.FingerList_is_empty_get)
    leftmost = property(LeapPython3.FingerList_leftmost_get)
    rightmost = property(LeapPython3.FingerList_rightmost_get)
    frontmost = property(LeapPython3.FingerList_frontmost_get)

    def __iter__(self):
      _pos = 0
      while _pos < len(self):
        yield self[_pos]
        _pos += 1

    __swig_destroy__ = LeapPython3.delete_FingerList

# Register FingerList in LeapPython3:
LeapPython3.FingerList_swigregister(FingerList)

class ToolList(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.ToolList_swiginit(self, LeapPython3.new_ToolList())

    def __len__(self):
        return LeapPython3.ToolList___len__(self)

    def __getitem__(self, index):
        return LeapPython3.ToolList___getitem__(self, index)

    def append(self, other):
        return LeapPython3.ToolList_append(self, other)
    is_empty = property(LeapPython3.ToolList_is_empty_get)
    leftmost = property(LeapPython3.ToolList_leftmost_get)
    rightmost = property(LeapPython3.ToolList_rightmost_get)
    frontmost = property(LeapPython3.ToolList_frontmost_get)

    def __iter__(self):
      _pos = 0
      while _pos < len(self):
        yield self[_pos]
        _pos += 1

    __swig_destroy__ = LeapPython3.delete_ToolList

# Register ToolList in LeapPython3:
LeapPython3.ToolList_swigregister(ToolList)

class HandList(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.HandList_swiginit(self, LeapPython3.new_HandList())

    def __len__(self):
        return LeapPython3.HandList___len__(self)

    def __getitem__(self, index):
        return LeapPython3.HandList___getitem__(self, index)

    def append(self, other):
        return LeapPython3.HandList_append(self, other)
    is_empty = property(LeapPython3.HandList_is_empty_get)
    leftmost = property(LeapPython3.HandList_leftmost_get)
    rightmost = property(LeapPython3.HandList_rightmost_get)
    frontmost = property(LeapPython3.HandList_frontmost_get)

    def __iter__(self):
      _pos = 0
      while _pos < len(self):
        yield self[_pos]
        _pos += 1

    __swig_destroy__ = LeapPython3.delete_HandList

# Register HandList in LeapPython3:
LeapPython3.HandList_swigregister(HandList)

class GestureList(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.GestureList_swiginit(self, LeapPython3.new_GestureList())

    def __len__(self):
        return LeapPython3.GestureList___len__(self)

    def __getitem__(self, index):
        return LeapPython3.GestureList___getitem__(self, index)

    def append(self, other):
        return LeapPython3.GestureList_append(self, other)
    is_empty = property(LeapPython3.GestureList_is_empty_get)

    def __iter__(self):
      _pos = 0
      while _pos < len(self):
        yield self[_pos]
        _pos += 1

    __swig_destroy__ = LeapPython3.delete_GestureList

# Register GestureList in LeapPython3:
LeapPython3.GestureList_swigregister(GestureList)

class ScreenList(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.ScreenList_swiginit(self, LeapPython3.new_ScreenList())

    def __len__(self):
        return LeapPython3.ScreenList___len__(self)

    def __getitem__(self, index):
        return LeapPython3.ScreenList___getitem__(self, index)

    def closest_screen_hit(self, *args):
        return LeapPython3.ScreenList_closest_screen_hit(self, *args)

    def closest_screen(self, position):
        return LeapPython3.ScreenList_closest_screen(self, position)
    is_empty = property(LeapPython3.ScreenList_is_empty_get)

    def __iter__(self):
      _pos = 0
      while _pos < len(self):
        yield self[_pos]
        _pos += 1

    __swig_destroy__ = LeapPython3.delete_ScreenList

# Register ScreenList in LeapPython3:
LeapPython3.ScreenList_swigregister(ScreenList)

class DeviceList(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.DeviceList_swiginit(self, LeapPython3.new_DeviceList())

    def __len__(self):
        return LeapPython3.DeviceList___len__(self)

    def __getitem__(self, index):
        return LeapPython3.DeviceList___getitem__(self, index)

    def append(self, other):
        return LeapPython3.DeviceList_append(self, other)
    is_empty = property(LeapPython3.DeviceList_is_empty_get)

    def __iter__(self):
      _pos = 0
      while _pos < len(self):
        yield self[_pos]
        _pos += 1

    __swig_destroy__ = LeapPython3.delete_DeviceList

# Register DeviceList in LeapPython3:
LeapPython3.DeviceList_swigregister(DeviceList)

class ImageList(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.ImageList_swiginit(self, LeapPython3.new_ImageList())

    def __len__(self):
        return LeapPython3.ImageList___len__(self)

    def __getitem__(self, index):
        return LeapPython3.ImageList___getitem__(self, index)

    def append(self, other):
        return LeapPython3.ImageList_append(self, other)
    is_empty = property(LeapPython3.ImageList_is_empty_get)

    def __iter__(self):
      _pos = 0
      while _pos < len(self):
        yield self[_pos]
        _pos += 1

    __swig_destroy__ = LeapPython3.delete_ImageList

# Register ImageList in LeapPython3:
LeapPython3.ImageList_swigregister(ImageList)

class TrackedQuad(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.TrackedQuad_swiginit(self, LeapPython3.new_TrackedQuad())

    def __eq__(self, arg2):
        return LeapPython3.TrackedQuad___eq__(self, arg2)

    def __ne__(self, arg2):
        return LeapPython3.TrackedQuad___ne__(self, arg2)

    def __str__(self):
        return LeapPython3.TrackedQuad___str__(self)
    width = property(LeapPython3.TrackedQuad_width_get)
    height = property(LeapPython3.TrackedQuad_height_get)
    resolution_x = property(LeapPython3.TrackedQuad_resolution_x_get)
    resolution_y = property(LeapPython3.TrackedQuad_resolution_y_get)
    visible = property(LeapPython3.TrackedQuad_visible_get)
    orientation = property(LeapPython3.TrackedQuad_orientation_get)
    position = property(LeapPython3.TrackedQuad_position_get)
    masks = property(LeapPython3.TrackedQuad_masks_get)
    images = property(LeapPython3.TrackedQuad_images_get)
    is_valid = property(LeapPython3.TrackedQuad_is_valid_get)
    __swig_destroy__ = LeapPython3.delete_TrackedQuad

# Register TrackedQuad in LeapPython3:
LeapPython3.TrackedQuad_swigregister(TrackedQuad)
TrackedQuad.invalid = LeapPython3.cvar.TrackedQuad_invalid

class MaskList(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.MaskList_swiginit(self, LeapPython3.new_MaskList())

    def __len__(self):
        return LeapPython3.MaskList___len__(self)

    def __getitem__(self, index):
        return LeapPython3.MaskList___getitem__(self, index)

    def append(self, other):
        return LeapPython3.MaskList_append(self, other)
    is_empty = property(LeapPython3.MaskList_is_empty_get)

    def __iter__(self):
      _pos = 0
      while _pos < len(self):
        yield self[_pos]
        _pos += 1

    __swig_destroy__ = LeapPython3.delete_MaskList

# Register MaskList in LeapPython3:
LeapPython3.MaskList_swigregister(MaskList)

class InteractionBox(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.InteractionBox_swiginit(self, LeapPython3.new_InteractionBox())

    def normalize_point(self, position, clamp=True):
        return LeapPython3.InteractionBox_normalize_point(self, position, clamp)

    def denormalize_point(self, normalized_position):
        return LeapPython3.InteractionBox_denormalize_point(self, normalized_position)

    def __eq__(self, arg2):
        return LeapPython3.InteractionBox___eq__(self, arg2)

    def __ne__(self, arg2):
        return LeapPython3.InteractionBox___ne__(self, arg2)

    def __str__(self):
        return LeapPython3.InteractionBox___str__(self)
    center = property(LeapPython3.InteractionBox_center_get)
    width = property(LeapPython3.InteractionBox_width_get)
    height = property(LeapPython3.InteractionBox_height_get)
    depth = property(LeapPython3.InteractionBox_depth_get)
    is_valid = property(LeapPython3.InteractionBox_is_valid_get)
    __swig_destroy__ = LeapPython3.delete_InteractionBox

# Register InteractionBox in LeapPython3:
LeapPython3.InteractionBox_swigregister(InteractionBox)
InteractionBox.invalid = LeapPython3.cvar.InteractionBox_invalid

class Frame(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.Frame_swiginit(self, LeapPython3.new_Frame())

    def hand(self, id):
        return LeapPython3.Frame_hand(self, id)

    def pointable(self, id):
        return LeapPython3.Frame_pointable(self, id)

    def finger(self, id):
        return LeapPython3.Frame_finger(self, id)

    def tool(self, id):
        return LeapPython3.Frame_tool(self, id)

    def gesture(self, id):
        return LeapPython3.Frame_gesture(self, id)

    def gestures(self, *args):
        return LeapPython3.Frame_gestures(self, *args)

    def translation(self, since_frame):
        return LeapPython3.Frame_translation(self, since_frame)

    def translation_probability(self, since_frame):
        return LeapPython3.Frame_translation_probability(self, since_frame)

    def rotation_axis(self, since_frame):
        return LeapPython3.Frame_rotation_axis(self, since_frame)

    def rotation_angle(self, *args):
        return LeapPython3.Frame_rotation_angle(self, *args)

    def rotation_matrix(self, since_frame):
        return LeapPython3.Frame_rotation_matrix(self, since_frame)

    def rotation_probability(self, since_frame):
        return LeapPython3.Frame_rotation_probability(self, since_frame)

    def scale_factor(self, since_frame):
        return LeapPython3.Frame_scale_factor(self, since_frame)

    def scale_probability(self, since_frame):
        return LeapPython3.Frame_scale_probability(self, since_frame)

    def __eq__(self, arg2):
        return LeapPython3.Frame___eq__(self, arg2)

    def __ne__(self, arg2):
        return LeapPython3.Frame___ne__(self, arg2)

    def serialize(self, ptr):
        return LeapPython3.Frame_serialize(self, ptr)

    def deserialize(self, ptr, length):
        return LeapPython3.Frame_deserialize(self, ptr, length)

    def __str__(self):
        return LeapPython3.Frame___str__(self)
    id = property(LeapPython3.Frame_id_get)
    timestamp = property(LeapPython3.Frame_timestamp_get)
    current_frames_per_second = property(LeapPython3.Frame_current_frames_per_second_get)
    pointables = property(LeapPython3.Frame_pointables_get)
    fingers = property(LeapPython3.Frame_fingers_get)
    tools = property(LeapPython3.Frame_tools_get)
    hands = property(LeapPython3.Frame_hands_get)
    images = property(LeapPython3.Frame_images_get)
    is_valid = property(LeapPython3.Frame_is_valid_get)
    interaction_box = property(LeapPython3.Frame_interaction_box_get)
    serialize_length = property(LeapPython3.Frame_serialize_length_get)
    tracked_quad = property(LeapPython3.Frame_tracked_quad_get)

    def serialize(self):
      length = self.serialize_length
      str = byte_array(length)
      LeapPython3.Frame_serialize(self, str)
      return (str, length)
    def deserialize(self, tup):
      LeapPython3.Frame_deserialize(self, tup[0], tup[1])
    __swig_getmethods__["serialize"] = serialize
    if _newclass:serialize = _swig_property(serialize)

    __swig_destroy__ = LeapPython3.delete_Frame

# Register Frame in LeapPython3:
LeapPython3.Frame_swigregister(Frame)
Frame.invalid = LeapPython3.cvar.Frame_invalid

class BugReport(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.BugReport_swiginit(self, LeapPython3.new_BugReport())

    def begin_recording(self):
        return LeapPython3.BugReport_begin_recording(self)

    def end_recording(self):
        return LeapPython3.BugReport_end_recording(self)
    is_active = property(LeapPython3.BugReport_is_active_get)
    progress = property(LeapPython3.BugReport_progress_get)
    duration = property(LeapPython3.BugReport_duration_get)
    __swig_destroy__ = LeapPython3.delete_BugReport

# Register BugReport in LeapPython3:
LeapPython3.BugReport_swigregister(BugReport)

class Config(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        LeapPython3.Config_swiginit(self, LeapPython3.new_Config())
    TYPE_UNKNOWN = LeapPython3.Config_TYPE_UNKNOWN
    TYPE_BOOLEAN = LeapPython3.Config_TYPE_BOOLEAN
    TYPE_INT32 = LeapPython3.Config_TYPE_INT32
    TYPE_FLOAT = LeapPython3.Config_TYPE_FLOAT
    TYPE_STRING = LeapPython3.Config_TYPE_STRING



















    def save(self):
        return LeapPython3.Config_save(self)

    def get(self, *args):
    type = LeapPython3.Config_type(self, *args)
    if type == LeapPython3.Config_TYPE_BOOLEAN:
      return LeapPython3.Config_get_bool(self, *args)
    elif type == LeapPython3.Config_TYPE_INT32:
      return LeapPython3.Config_get_int_32(self, *args)
    elif type == LeapPython3.Config_TYPE_FLOAT:
      return LeapPython3.Config_get_float(self, *args)
    elif type == LeapPython3.Config_TYPE_STRING:
      return LeapPython3.Config_get_string(self, *args)
    return None
    def set(self, *args):
    type = LeapPython3.Config_type(self, *args[:-1])  # Do not pass value through
    if type == LeapPython3.Config_TYPE_BOOLEAN:
      return LeapPython3.Config_set_bool(self, *args)
    elif type == LeapPython3.Config_TYPE_INT32:
      return LeapPython3.Config_set_int_32(self, *args)
    elif type == LeapPython3.Config_TYPE_FLOAT:
      return LeapPython3.Config_set_float(self, *args)
    elif type == LeapPython3.Config_TYPE_STRING:
      return LeapPython3.Config_set_string(self, *args)
    return False

    __swig_destroy__ = LeapPython3.delete_Config

# Register Config in LeapPython3:
LeapPython3.Config_swigregister(Config)

class Controller(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = LeapPython3.delete_Controller

    def __init__(self, *args):
        LeapPython3.Controller_swiginit(self, LeapPython3.new_Controller(*args))

    def is_service_connected(self):
        return LeapPython3.Controller_is_service_connected(self)
    POLICY_DEFAULT = LeapPython3.Controller_POLICY_DEFAULT
    POLICY_BACKGROUND_FRAMES = LeapPython3.Controller_POLICY_BACKGROUND_FRAMES
    POLICY_IMAGES = LeapPython3.Controller_POLICY_IMAGES
    POLICY_OPTIMIZE_HMD = LeapPython3.Controller_POLICY_OPTIMIZE_HMD

    def set_policy_flags(self, flags):
        return LeapPython3.Controller_set_policy_flags(self, flags)

    def set_policy(self, policy):
        return LeapPython3.Controller_set_policy(self, policy)

    def clear_policy(self, policy):
        return LeapPython3.Controller_clear_policy(self, policy)

    def is_policy_set(self, policy):
        return LeapPython3.Controller_is_policy_set(self, policy)

    def add_listener(self, listener):
        return LeapPython3.Controller_add_listener(self, listener)

    def remove_listener(self, listener):
        return LeapPython3.Controller_remove_listener(self, listener)

    def frame(self, history=0):
        return LeapPython3.Controller_frame(self, history)

    def enable_gesture(self, type, enable=True):
        return LeapPython3.Controller_enable_gesture(self, type, enable)

    def is_gesture_enabled(self, type):
        return LeapPython3.Controller_is_gesture_enabled(self, type)

    def now(self):
        return LeapPython3.Controller_now(self)
    is_connected = property(LeapPython3.Controller_is_connected_get)
    has_focus = property(LeapPython3.Controller_has_focus_get)
    policy_flags = property(LeapPython3.Controller_policy_flags_get)
    config = property(LeapPython3.Controller_config_get)
    images = property(LeapPython3.Controller_images_get)
    located_screens = property(LeapPython3.Controller_located_screens_get)
    devices = property(LeapPython3.Controller_devices_get)
    tracked_quad = property(LeapPython3.Controller_tracked_quad_get)
    bug_report = property(LeapPython3.Controller_bug_report_get)

# Register Controller in LeapPython3:
LeapPython3.Controller_swigregister(Controller)

class Listener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Listener:
            _self = None
        else:
            _self = self
        LeapPython3.Listener_swiginit(self, LeapPython3.new_Listener(_self, ))
    __swig_destroy__ = LeapPython3.delete_Listener

    def on_init(self, arg0):
        return LeapPython3.Listener_on_init(self, arg0)

    def on_connect(self, arg0):
        return LeapPython3.Listener_on_connect(self, arg0)

    def on_disconnect(self, arg0):
        return LeapPython3.Listener_on_disconnect(self, arg0)

    def on_exit(self, arg0):
        return LeapPython3.Listener_on_exit(self, arg0)

    def on_frame(self, arg0):
        return LeapPython3.Listener_on_frame(self, arg0)

    def on_focus_gained(self, arg0):
        return LeapPython3.Listener_on_focus_gained(self, arg0)

    def on_focus_lost(self, arg0):
        return LeapPython3.Listener_on_focus_lost(self, arg0)

    def on_service_connect(self, arg0):
        return LeapPython3.Listener_on_service_connect(self, arg0)

    def on_service_disconnect(self, arg0):
        return LeapPython3.Listener_on_service_disconnect(self, arg0)

    def on_device_change(self, arg0):
        return LeapPython3.Listener_on_device_change(self, arg0)

    def on_images(self, arg0):
        return LeapPython3.Listener_on_images(self, arg0)
    def __disown__(self):
        self.this.disown()
        LeapPython3.disown_Listener(self)
        return weakref.proxy(self)

# Register Listener in LeapPython3:
LeapPython3.Listener_swigregister(Listener)



